{"version":3,"sources":["DownloadFolder/testFile.txt","Assets/testVid.mp4","Containers/testVid.mp4","logo.svg","Components/VideoPlayer.js","Components/Note.js","Containers/NoteContainer.js","Containers/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoPlayer","props","getTime","console","log","player","videoNode","currentTime","setState","state","bind","this","videojs","playlist","sources","src","type","poster","currentPlaylist","push","autoadvance","playlistUi","setVidRef","dispose","data-vjs-player","ref","node","className","class","onClick","React","Component","Meta","test","maxVideoId","maxNoteId","noteData","videoId","source","url","fileName","notes","noteId","startTime","Date","endTime","text","bookmarked","drawn","images","zip","JSZip","Videos","folder","file","JSON","stringify","items","i","Note","refs","toString","scrollIntoView","block","behavior","index","ts","Math","round","item","Number","EPSILON","_ref","additionalClasses","setCurrVidTime","NoteContainer","handleShow","itemList","map","testFile","downloadNotes","generateAsync","then","content","filename","now","FileSaver","saveAs","PageContainer","videoRef","videoInfo","newNote","meta","info","setVideoRef","getVideoRef","getCurrVidTime","addNote","handleNoteInputChange","data","secs","e","metaCopy","target","value","autoplay","controls","techOrder","href","download","onChange","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2aec6dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/testFile.a8f4de44.txt\";","module.exports = __webpack_public_path__ + \"static/media/testVid.b60f6e67.mp4\";","module.exports = __webpack_public_path__ + \"static/media/testVid.b60f6e67.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport videojs from 'video.js';\nimport YoutubeVid from 'videojs-youtube';\nimport playlistJS from 'videojs-playlist';\nimport playlistUI from 'videojs-playlist-ui';\nimport '../Styles/videoStyles.css';\n\nimport '../../node_modules/videojs-playlist-ui/dist/videojs-playlist-ui.vertical.css';\n\n\n//  const getTime = ()=>{\n//     console.log(this.player , this.videoNode , this.player.currentTime())\n//   }\nexport default class VideoPlayer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state= { currentTime: 0}\n        this.getTime = this.getTime.bind(this);\n        // this.testFunc = this.testFunc.bind(this);\n    }\n \n\n//   testFunc(){\n//       console.log(\"lol\")\n//   }\n  getTime = ()=>{\n    // this.props.setVidRef(this.player)\n    console.log(this.player , this.videoNode , this.player.currentTime())\n    console.log(\"player ref from button:\", this.player, \"    .... end\")\n    this.setState({currentTime: this.player.currentTime()})\n  }\n//   getCurrentTime = ()=>{\n//     // this.props.setVidRef(this.player)\n//     console.log(this.player , this.videoNode , this.player.currentTime())\n//     console.log(\"player ref from button:\", this.player, \"    .... end\")\n//     this.setState({currentTime: this.player.currentTime()})\n//   }\n  componentDidMount(props) {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n    //   console.log('onPlayerReady', this, this.props.test)\n      console.log('onPlayerReady', this)\n    //   this.getTime()\n    \n    //   this.props.setVidRef(this.player)\n  \n    });\n    // this.testFunc()\n    this.player.playlist([{\n        // sources: [{\n        //   src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n        //   type: 'video/mp4'\n        // }],\n        sources: [{\n            src: 'https://www.youtube.com/watch?v=3WQHDUYk310&feature=emb_rel_pause',\n            type: 'video/youtube'\n        }],\n        poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n      }, \n      {\n        \n        sources: [{\n            src: 'https://www.youtube.com/watch?v=voFRslp8d60&t=17s',\n            type: 'video/youtube'\n        }],\n        poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n      }, \n    //   {\n    //     sources: [{\n    //       src: 'https://www.youtube.com/watch?v=U9DyHthJ6LA&feature=emb_rel_pause',\n    //       type: 'video/youtube'\n    //     }],\n    //     poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n    //   }, \n    ]);\n    console.log(\"the playlist1: \" ,this.player.playlist())\n    var currentPlaylist =  this.player.playlist()\n    currentPlaylist.push( {\n        sources: [{\n          src: 'https://www.youtube.com/watch?v=U9DyHthJ6LA&feature=emb_rel_pause',\n          type: 'video/youtube'\n        }],\n        poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n      }\n    )\n    this.player.playlist(currentPlaylist)\n    console.log(\"the playlist2: \" ,this.player.playlist())\n\n    // this.player.playlist(currentPlaylist)\n\n       \n      // Play through the playlist automatically.\n      this.player.playlist.autoadvance(0);\n      this.player.playlistUi();\n    this.props.setVidRef(this.player)\n  }\n\n   // destroy player on unmount\n   componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    // this.player.destroy()\n    }\n  }\n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  render() {\n    // this.props.setVidRef(this.player)\n    // console.log(\"player ref:\", this.player)\n    \n    return (\n      <div>\t\n        <div data-vjs-player>\n          <video ref={ node => this.videoNode = node } className=\"video-js mainVideo\"></video>\n        </div>\n        <div class=\"vjs-playlist\"></div>\n        <button onClick={this.getTime}>Get Current Time:</button><span>Time:{this.state.currentTime}</span>\n        {/* {this.props.setVidRef(this.player)} */}\n        {/* {this.props.test} */}\n      </div>\n    )\n  }\n}","// Scrolling view functionality is inspired and based off of CodePen:\n// Name: 'React: scrollIntoView'\n// Pen Owner: 'Hirokazu Takatama'\n\n\n\n\nimport React from \"react\";\n\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\n// import testVideo  from '../Assets/testVid.mp4'\n// import testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n\nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 1,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            type: 'web', //  web = youtube, vimero. etc, local = files\n            source: 'YouTube',\n            url: '',\n            fileName: null,\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message1\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message2\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            type: 'local', //  web = youtube, vimero. etc, local = files\n            source: null,\n            url: null,\n            fileName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message1\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message2\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\nvar items = [];\nfor (var i = 0; i < 100; i++) {\n  items.push(i+'d');\n}\n\nexport default class Note extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            // index: 0\n        }\n        // this.handleShow = this.handleShow.bind(this);\n \n    }\n    handleShow(i) {\n        console.log(this.refs, i)\n        console.log(this.refs[toString(i)])\n        // this.setState({index: i});\n        \n        // this.refs[i].scrollIntoView({block: 'end', behavior: 'smooth'});\n        // console.log(this.refs[i].)\n        // this.refs[i].attributes.push(\"centerListItem\")\n        this.refs[i].scrollIntoView({block: 'center', behavior: 'smooth'});\n\n        this.setState({index: i})\n      }\n\n      \n    render() {\n        var ts = Math.round((this.props.item.startTime + Number.EPSILON) * 100) / 100\n       \n        return(\n                // <div className='ListItem' >\n                    <pre ref={this.props._ref} className={'ListItem '+ this.props.additionalClasses} >\n                        <div onClick={() => this.props.setCurrVidTime(ts) } className=\"noteTitle\" >{ts} | Note Title <br/></div>\n                        {this.props.item.text}<br/>{ts}\n                    </pre>\n                  \n                // </div> setCurrentTime(seconds)\n\n        \n        );\n    }\n}\n","// Scrolling view functionality is inspired and based off of CodePen:\n// Name: 'React: scrollIntoView'\n// Pen Owner: 'Hirokazu Takatama'\n\n\n\n\nimport React from \"react\";\n\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\nimport testVideo  from '../Assets/testVid.mp4'\nimport testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\nimport Note from \"../Components/Note\";\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n\nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 1,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            type: 'web', //  web = youtube, vimero. etc, local = files\n            source: 'YouTube',\n            url: '',\n            fileName: null,\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message111\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message222\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            type: 'local', //  web = youtube, vimero. etc, local = files\n            source: null,\n            url: null,\n            fileName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message3\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message4\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\n// var items = [];\n// for (var i = 0; i < 100; i++) {\n//   items.push(i+'d');\n// }\n\nexport default class NoteContainer extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            index: 0\n\n            // notes:\n        }\n        this.handleShow = this.handleShow.bind(this);\n \n    }\n    handleShow(i) {\n        console.log(this.refs, i)\n        console.log(this.refs[toString(i)])\n        // this.setState({index: i});\n        \n        // this.refs[i].scrollIntoView({block: 'end', behavior: 'smooth'});\n        // console.log(this.refs[i].)\n        // this.refs[i].attributes.push(\"centerListItem\")\n        console.log('the refs: ', this.refs, this.refs[1] )\n        this.refs[i].scrollIntoView({block: 'center', behavior: 'smooth'});\n\n        this.setState({index: i})\n      }\n\n      \n    render() {\n      \n        // props = this.props\n\n        // (itemss) = this.props\n        // let { id, itemss } =  this.props;\n        // console.log(\"ITEMMMMS\", itemss)\n        // console.log(\"ITEMMMMS2\", this.props)\n        var items = this.props.itemList\n        console.log(\"ITEMMMMS\", items.notes)\n        return(\n                <div>\n                    {this.state.index}\n                    {/* this must be a arrow function in order to bind the this so that we can use state in the map function  */}\n                  <ul>{items.notes.map((item, i) => {\n                    //   if (i == this.state.index){}\n                      if (i == this.state.index){\n                        return (\n                            // <li ref={i} className='centerListItem' >{item.text}</li>\n                            // <Note _ref={i} item={item} additionalClasses='centerListItem' ></Note>\n                            // <pre ref={i} className='ListItem centerListItem' >{item.text}<br/>{item.startTime}</pre>\n                            <div ref={i}>\n                                <Note _ref={i} item={item} additionalClasses='centerListItem' setCurrVidTime = {this.props.setCurrVidTime } ></Note>\n                                {/* <pre className='ListItem centerListItem' >{item.text}<br/>{item.startTime}</pre> */}\n                            </div>\n                        )\n                      }\n                      else{\n                        return (\n                            // <li ref={i}>{item.text}</li>\n                            // <Note _ref={i} item={item} ></Note>\n                            // <pre ref={i} className='ListItem' >{item.text}<br/>{item.startTime}</pre>\n                            <div ref={i}>\n                                <Note _ref={i} item={item} additionalClasses='' setCurrVidTime = {this.props.setCurrVidTime }  ></Note>\n                                {/* <pre className='ListItem' >{item.text}<br/>{item.startTime}</pre> */}\n                            </div>\n\n\n                          )\n                      }\n                      \n                    })}\n                  </ul>\n                  <button onClick={this.handleShow.bind(this, 0)}>0</button>\n                  <button onClick={this.handleShow.bind(this, 2)}>2</button>\n                  <button onClick={this.handleShow.bind(this, 50)}>50</button>\n                  <button onClick={this.handleShow.bind(this, 99)}>99</button>\n                  {this.state.index}\n                </div>\n        \n        );\n    }\n}\n","import React from \"react\";\n// import styled from 'styled-components';\n// import { theme } from \"../util/GlobalStyles\";\n// import './App.css';\n\n// import '../Styles/expandingCard.css'\n// import '../Styles/social-media-slider-toggles.css'\n// import '../Styles/navbar.css'\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\nimport testVideo  from '../Assets/testVid.mp4'\nimport testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\nimport NoteContainer from \"./NoteContainer\";\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n// const testFile2 = testF;\n// let zip = new JSZip();\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.generateAsync({type: \"blob\"}).then(function(content) {\n//   FileSaver.saveAs(content, \"download.zip\");\n// }); \n// this command will download a file right away\n\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n                    \nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 1,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            type: 'web', //  web = youtube, vimero. etc, local = files\n            source: 'YouTube',\n            url: '',\n            fileName: null,\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message111\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message222\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            type: 'local', //  web = youtube, vimero. etc, local = files\n            source: null,\n            url: null,\n            fileName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message1\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message2\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\nvar items = [];\nfor (var i = 0; i < 100; i++) {\n  items.push(i+'d');\n}\n\n\nexport default class PageContainer extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            videoRef : null,\n            videoInfo: {},\n            newNote: '',\n            meta: Meta,\n            info: 'asdf'\n        }\n        this.setVideoRef = this.setVideoRef.bind(this);\n        this.getVideoRef = this.getVideoRef.bind(this);\n        this.getCurrVidTime = this.getCurrVidTime.bind(this);\n        this.setCurrVidTime = this.setCurrVidTime.bind(this);\n\n        this.addNote = this.addNote.bind(this);\n        this.handleNoteInputChange = this.handleNoteInputChange.bind(this);\n    }\n    // shouldComponentUpdate(){\n    //     return false\n    // }\n    setVideoRef(ref){\n        this.setState({\n            videoRef : ref\n        })\n    }\n    getVideoRef(){\n        console.log(this.state.videoRef)\n    }\n    getCurrVidTime(data){\n        // console.log(data)\n        var currentTime = this.state.videoRef.currentTime()\n        console.log(\"bhaisdbfalifba\" , currentTime)\n        return currentTime\n        // console.log(\"bhaisdbfalifba\" )\n    }\n    setCurrVidTime(secs){\n        console.log(secs )\n        // this.setState\n        if (this.state.videoRef != null){\n            this.state.videoRef.currentTime(secs)\n        }\n        \n        // console.log(\"bhaisdbfalifba\" , currentTime)\n        // return currentTime\n        // console.log(\"bhaisdbfalifba\" )\n    }\n\n    addNote(e){\n        console.log(this.state.newNote)\n    //     maxVideoId: 1,\n    // maxNoteId:  3,\n        // this.state\n        var metaCopy = this.state.meta;\n        var currentTime  = this.getCurrVidTime()\n        metaCopy.noteData[0].notes.push(\n            {   \n                noteId: Meta.maxNoteId+1,\n                startTime: currentTime, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                endTime: null,\n                text: this.state.newNote,\n                bookmarked: false,\n                drawn: false,\n                images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n            }\n        )\n        metaCopy.maxNoteId = metaCopy.maxNoteId+1;\n\n\n\n        this.setState({\n            meta: metaCopy,\n            info: this.state.newNote\n        }, console.log(this.state.meta) )\n\n        // this.state.meta.noteData[0].notes.push(\n        //     {   \n        //         noteId: Meta.maxNoteId+1,\n        //         startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n        //         endTime: null,\n        //         text: this.state.newNote,\n        //         bookmarked: false,\n        //         drawn: false,\n        //         images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n        //     }\n        // )\n        // Meta.maxNoteId = Meta.maxNoteId+1;\n\n        // console.log(e.target)\n    }\n    handleNoteInputChange(e){\n        this.setState({newNote: e.target.value})\n    }\n      \n    render() {\n        const videoJsOptions = {\n            autoplay: true,\n            controls: true,\n       \n                techOrder: ['youtube'],\n                sources: [\n                  {\n                    type: 'video/youtube',\n                    src: 'https://www.youtube.com/watch?v=TeccAtqd5K8' //note that there will be a benign Youtube server side error saying that the host don't match but there is supposedly nothing to worry about this according to stack overflow: https://stackoverflow.com/questions/47833687/youtube-api-failed-to-execute-postmessage-on-domwindow\n                    // src: 'https://www.youtube.com/embed/HIbAz29L-FA?modestbranding=1&playsinline=0&showinfo=0&enablejsapi=1&origin=http://localhost:3000&widgetid=1',\n                    // enablejsapi:1,\n                    // origin:'https://www.youtube.com'\n                  }\n                ]\n          }\n          \n       \n        return(\n            <div className=\"tripleColumnContainer\" >\n                <div className='videoPlayer' >\n                    {/* <video\n                        id=\"my-video\"\n                        className=\"video-js\"\n                        controls\n                        preload=\"auto\"\n                        width=\"640\"\n                        height=\"264\"\n                        poster=\"MY_VIDEO_POSTER.jpg\"\n                    >\n                        <source src={testVideo} type=\"video/mp4\" />\n\n                    </video> */}\n                     {/* <div data-vjs-player>\n                        <video id=\"example_video_1\" \n                            className=\"video-js \" \n                            controls\n                            preload=\"auto\" \n                            width=\"640\"\n                            height=\"264\"\n                            poster=\"http://ec2-54-227-116-247.compute-1.amazonaws.com/models/site-templates/images/cover_img/ted_cover.jpg\" \n                            data-setup='{ \"techOrder\": [\"youtube\"], \"sources\": [{ \"type\": \"video/youtube\", \"src\": \"https://www.youtube.com/watch?v=xjS6SftYQaQ\"}] }'\n                        >\n                        </video>\n                    </div> */}\n                    <VideoPlayer { ...videoJsOptions } setVidRef = {this.setVideoRef}  test = \"hi\" />\n                    <button onClick={this.getVideoRef}>getVideoRef</button>\n                    <button onClick={this.getCurrVidTime}>Get current Video Time [PC] </button>\n                    <button onClick={ () => this.setCurrVidTime(180)}>Set current Video Time to 3 min[PC] </button>\n                   \n                        jhvj\n                    {/* </div> */}\n                    {/* <video src={testVideo} autoPlay=\"true\" /> */}\n\n\n                    {/* <video id=\"example_video_1\" \n  class=\"video-js vjs-default-skin\" \n  controls\n  preload=\"auto\" \n  width=\"640\"\n  height=\"264\"\n  poster=\"http://ec2-54-227-116-247.compute-1.amazonaws.com/models/site-templates/images/cover_img/ted_cover.jpg\" \n  data-setup='{\"techOrder\":[\"youtube\"], \"src\":\"http://www.youtube.com/watch?v=xYemnKEKx0c\"}'></video> */}\n                    \n                </div>\n                <div className='playList' >\n                    {/* this is how to create an HTML a tag that will download a local app file*/}\n                    <a href={testFile} download=\"testFile.txt\">{testFile}Hiii</a>\n                    <button onClick={downloadNotes}> Click to Download Info </button>\n                    {/* <a href={testFile2} download=\"testFolder.zip\">----Hiii2</a> */}Hi\n                    <textarea onChange={this.handleNoteInputChange} className='NoteInputField' ></textarea> <button onClick={this.addNote} type='submit' >Submit Note</button>\n                </div>\n                <div>\n                    {this.state.info} \n                </div>\n                    \n                <div className='notes'>\n                    <NoteContainer id=\"list\" \n                    // itemList={items} \n                    itemList = {this.state.meta.noteData[0]} \n\n                    setCurrVidTime = {this.setCurrVidTime}\n                    />\n                    Hi\n                </div>\n                {/* {this.setCurrVidTime(180)} */}\n               \n            </div>\n        \n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PageContainer from './Containers/PageContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PageContainer/>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}