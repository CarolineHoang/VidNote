{"version":3,"sources":["DownloadFolder/testFile.txt","Containers/testVid.mp4","Assets/testVid.mp4","logo.svg","Components/Playlist.js","Components/VideoPlayer.js","Components/Note.js","Containers/NoteContainer.js","Containers/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Playlist","props","state","playerRef","currentPlaylist","nextProps","nextState","console","log","playlist","this","length","prevProps","setState","player","currentItem","test","undefined","autoadvance","playlistUi","class","React","Component","VideoPlayer","getTime","videoNode","currentTime","bind","videojs","setVidRef","dispose","data-vjs-player","ref","node","className","onClick","Meta","maxVideoId","maxNoteId","noteData","videoId","type","source","url","fileName","notes","noteId","startTime","Date","endTime","text","bookmarked","drawn","images","zip","JSZip","Videos","folder","file","JSON","stringify","items","i","push","Note","editing","textarea_disabled","textareaValue","note","noteSectionVideoId","handleToggleState","handleSave","refs","toString","scrollIntoView","block","behavior","index","e","changeNote","stateVal","target","value","noteInfo","ts","Math","round","Number","EPSILON","_ref","additionalClasses","setCurrVidTime","noteTitle","hidden","onChange","handleInputChange","NoteContainer","handleShow","itemList","videoName","category","href","map","item","testFile","created","now","lastUpdated","testVideo2","downloadNotes","generateAsync","then","content","filename","FileSaver","saveAs","PageContainer","videoRef","videoInfo","newNote","newVideoLink","meta","info","uploadedVideos","currPlayingVid","currPlayingVidId","setVideoRef","getVideoRef","getCurrVidTime","addNote","uploadFile","addToPlaylist","on","currentIndex","currIndex","data","secs","metaCopy","newText","fileTarget","src","vidName","split","pop","substr","lastIndexOf","URL","createObjectURL","files","parseInt","ext","id","arrayBuffer","playlistJSON","forEach","videoJSON","name","sources","poster","thumbnail","srcset","media","autoplay","controls","download","key","accept","window","print","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57476484.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/testFile.a8f4de44.txt\";","module.exports = __webpack_public_path__ + \"static/media/testVid.b60f6e67.mp4\";","module.exports = __webpack_public_path__ + \"static/media/testVid.b60f6e67.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport videojs from 'video.js';\nimport YoutubeVid from 'videojs-youtube';\nimport playlistJS from 'videojs-playlist';\nimport playlistUI from 'videojs-playlist-ui';\nimport '../Styles/videoStyles.css';\n\n// import '../../node_modules/videojs-playlist-ui/dist/videojs-playlist-ui.vertical.css';\n// import '../../node_modules/videojs-playlist-ui/dist/videojs-playlist-ui.css';\nimport '../Styles/custom-playlist-styles.css'\n\n\n\n//  const getTime = ()=>{\n//     console.log(this.props.player , this.videoNode , this.props.player.currentTime())\n//   }\nexport default class Playlist extends React.Component {\n    constructor(props){\n        super(props);\n        this.state= { \n            playerRef : null,\n            currentPlaylist : []\n        }\n        // this.testFunc = this.testFunc.bind(this);\n    }\n    shouldComponentUpdate(nextProps, nextState){\n        //originally wrote this to prevent rerender because I thought this was what kept resetting the playlist to the start\n        // that is false, it was the lack of a second parameter in the componentDidUpdate this.props.player.playlist() function\n        // I am still leaving this however as to make runtime more optimized, but if there is an issue, I should come back here and delete this:\n        console.log(\"compare it2:\", nextProps.playlist , this.props.playlist , nextProps.playlist.length  != this.props.playlist.length)\n        return (nextProps.playlist.length  != this.props.playlist.length)\n        // if (this.state.currentPlaylist != this.nextState.currentPlaylist ){\n        //     console.log(\"Component Updating\", this.state.currentPlaylist, nextState.currentPlaylist)\n        //     return true\n        // }\n        // else{\n            // return false\n        // }\n        \n    }\n    componentDidUpdate(prevProps) {\n        if(prevProps.playlist  !== this.props.playlist ) {\n          this.setState({currentPlaylist : this.props.playlist }, ()=> {\n              console.log(\"The Current Playlist UPDATED:\", this.props.playlist)\n              this.props.player.playlist(this.props.playlist, this.props.player.playlist.currentItem()); //this second parameter must be set or the playlist will jump to start once updated (default for the second parameter [index of first video to play] is 0 )\n\n            });\n        }\n      }\n    componentDidMount(){\n        // if (this.state.playerRef !== this.props.player || this.state.playerRef == null ){\n        //     this.setState ({ playerRef : this.props.player})\n        // }\n        // if (this.state.currentPlaylist !== this.props.playlist ){\n        //     this.setState({\n        //         currentPlaylist : this.props.playlist \n        //     })\n            \n        // }\n        console.log(\"hit!!\")\n        console.log(\"The Current Playlist:\", this.props.playlist)\n\n        console.log(\"player: \", this.props.player, this.props.test)\n        if (this.props.player != undefined && this.props.player != null){\n\n            // this.props.player.playlist([]);\n            this.props.player.playlist(this.props.playlist);\n\n            // console.log(\"the playlist1: \" ,this.props.player.playlist())\n            // var currentPlaylist =  this.props.player.playlist()\n            // var currentPlaylist =  this.state.currentPlaylist\n            // currentPlaylist.push( {\n            //     sources: [{\n            //       src: 'https://www.youtube.com/watch?v=U9DyHthJ6LA&feature=emb_rel_pause',\n            //       type: 'video/youtube'\n            //     }],\n            //     poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n            //   }\n            // )\n            // this.props.player.playlist(currentPlaylist)\n            console.log(\"the playlist2: \" ,this.props.player.playlist())\n        \n            // this.props.player.playlist(currentPlaylist)\n        \n               \n              // Play through the playlist automatically.\n              this.props.player.playlist.autoadvance(0);\n              this.props.player.playlistUi();\n        }\n        \n    }\n    \n  \n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  render() {\n    // this.props.setVidRef(this.props.player)\n    // console.log(\"player ref:\", this.props.player)\n    // if (this.state.playerRef !== this.props.player || this.state.playerRef == null ){\n    //     this.setState ({ playerRef : this.props.player})\n    // }\n    \n    return (\n      <div>\t\n        <div class=\"vjs-playlist\"></div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport videojs from 'video.js';\nimport YoutubeVid from 'videojs-youtube';\nimport playlistJS from 'videojs-playlist';\nimport playlistUI from 'videojs-playlist-ui';\nimport '../Styles/videoStyles.css';\n\n// import '../../node_modules/videojs-playlist-ui/dist/videojs-playlist-ui.vertical.css';\nimport Playlist from './Playlist';\n\n\n//  const getTime = ()=>{\n//     console.log(this.player , this.videoNode , this.player.currentTime())\n//   }\nexport default class VideoPlayer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state= { currentTime: 0}\n        this.getTime = this.getTime.bind(this);\n        // this.testFunc = this.testFunc.bind(this);\n    }\n \n\n//   testFunc(){\n//       console.log(\"lol\")\n//   }\nshouldComponentUpdate(){\n    return false\n}\n  getTime = ()=>{\n    // this.props.setVidRef(this.player)\n    console.log(this.player , this.videoNode , this.player.currentTime())\n    console.log(\"player ref from button:\", this.player, \"    .... end\")\n    this.setState({currentTime: this.player.currentTime()})\n  }\n//   getCurrentTime = ()=>{\n//     // this.props.setVidRef(this.player)\n//     console.log(this.player , this.videoNode , this.player.currentTime())\n//     console.log(\"player ref from button:\", this.player, \"    .... end\")\n//     this.setState({currentTime: this.player.currentTime()})\n//   }\n  componentDidMount(props) {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n    //   console.log('onPlayerReady', this, this.props.test)\n      console.log('onPlayerReady', this)\n    //   this.getTime()\n    \n    //   this.props.setVidRef(this.player)\n\n  \n    });\n                                // // this.testFunc()\n                                // this.player.playlist([{\n                                //     // sources: [{\n                                //     //   src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n                                //     //   type: 'video/mp4'\n                                //     // }],\n                                //     sources: [{\n                                //         src: 'https://www.youtube.com/watch?v=3WQHDUYk310&feature=emb_rel_pause',\n                                //         type: 'video/youtube'\n                                //     }],\n                                //     poster: 'http://media.w3.org/2010/05/sintel/poster.png' //this is the image that shows while it loads I think\n                                // }, \n                                // {\n                                    \n                                //     sources: [{\n                                //         src: 'https://www.youtube.com/watch?v=voFRslp8d60&t=17s',\n                                //         type: 'video/youtube'\n                                //     }],\n                                //     poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n                                // }, \n                                // //   {\n                                // //     sources: [{\n                                // //       src: 'https://www.youtube.com/watch?v=U9DyHthJ6LA&feature=emb_rel_pause',\n                                // //       type: 'video/youtube'\n                                // //     }],\n                                // //     poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n                                // //   }, \n                                // ]);\n                                // console.log(\"the playlist1: \" ,this.player.playlist())\n                                // var currentPlaylist =  this.player.playlist()\n                                // currentPlaylist.push( {\n                                //     sources: [{\n                                //     src: 'https://www.youtube.com/watch?v=U9DyHthJ6LA&feature=emb_rel_pause',\n                                //     type: 'video/youtube'\n                                //     }],\n                                //     poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n                                // }\n                                // )\n                                // this.player.playlist(currentPlaylist)\n                                // console.log(\"the playlist2: \" ,this.player.playlist())\n\n                                // // this.player.playlist(currentPlaylist)\n\n                                \n                                // // Play through the playlist automatically.\n                                // this.player.playlist.autoadvance(0);\n                                // this.player.playlistUi();\n\n    this.props.setVidRef(this.player)\n    console.log(\"player2: \", this.player)\n  }\n\n   // destroy player on unmount\n   componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    // this.player.destroy()\n    }\n  }\n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  render() {\n    // this.props.setVidRef(this.player)\n    // console.log(\"player ref:\", this.player)\n\n    console.log(\"player3: \", this.player)\n    \n    return (\n      <div>\t\n        <div data-vjs-player>\n          <video ref={ node => this.videoNode = node } className=\"video-js mainVideo\"></video>\n        </div>\n        {/* <div class=\"vjs-playlist\"></div> */}\n        {/* <Playlist player={this.player} test= 'this should APPEAR' /> */}\n        <button onClick={this.getTime}>Get Current Time:</button><span>Time:{this.state.currentTime}</span>\n        {/* {this.props.setVidRef(this.player)} */}\n        {/* {this.props.test} */}\n      </div>\n    )\n  }\n}","// Scrolling view functionality is inspired and based off of CodePen:\n// Name: 'React: scrollIntoView'\n// Pen Owner: 'Hirokazu Takatama'\n\n\n\n\nimport React from \"react\";\n\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\n// import testVideo  from '../Assets/testVid.mp4'\n// import testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n\nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 1,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            type: 'web', //  web = youtube, vimero. etc, local = files\n            source: 'YouTube',\n            url: '',\n            fileName: null,\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message1\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message2\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            type: 'local', //  web = youtube, vimero. etc, local = files\n            source: null,\n            url: null,\n            fileName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message1\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message2\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\nvar items = [];\nfor (var i = 0; i < 100; i++) {\n  items.push(i+'d');\n}\n\nexport default class Note extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            editing: false,\n            textarea_disabled: true,\n            textareaValue: this.props.note.text,\n            noteSectionVideoId : this.props.videoId\n            \n            // index: 0\n        }\n        // this.handleShow = this.handleShow.bind(this);\n        this.handleToggleState = this.handleToggleState.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n    componentDidUpdate(nextProps){\n        if (nextProps.videoId != this.props.videoId){\n            this.setState({textarea_disabled: true})\n            console.log(\"updating...\")\n        }\n        else{\n            console.log(\"not updating...\")\n        }\n    }\n    // componentDidMount(){\n\n    // }\n    handleShow(i) {\n        console.log(this.refs, i)\n        console.log(this.refs[toString(i)])\n        // this.setState({index: i});\n        \n        // this.refs[i].scrollIntoView({block: 'end', behavior: 'smooth'});\n        // console.log(this.refs[i].)\n        // this.refs[i].attributes.push(\"centerListItem\")\n        this.refs[i].scrollIntoView({block: 'center', behavior: 'smooth'});\n\n        this.setState({index: i})\n      }\n\n    handleToggleState(e, state){\n        this.setState(\n            {\n            [state]: !this.state[state]\n            }, \n            ()=>{\n                console.log(\"Toggling \"+state, this.state[state])\n            }\n        )\n    }\n    handleSave(){\n        // this.props.changeNote(\"changing note\")\n        this.setState({textarea_disabled: true},  ()=>{\n            console.log(`textarea_disabled: `, this.state.textarea_disabled)\n            this.props.changeNote(this.props.note, this.state.textareaValue , this.props.videoId )\n\n        } )\n        // this.setState({\n        //     textarea_disabled: true\n        // })\n    }\n    handleInputChange(e, stateVal){\n        // var eVal = e.target.value\n        // in order to see the most current change in printing, you must include the print statment in the setState function and there must be in an anonymnous arrow function    >>> https://forum.freecodecamp.org/t/solved-this-setstate-is-updating-state-after-console-log/206985/2\n        //if we use []around the property name, we can use ES6 computed property names >>> https://stackoverflow.com/questions/29280445/reactjs-setstate-with-a-dynamic-key-name\n        this.setState({[stateVal]: e.target.value},  ()=>{console.log(`new ${stateVal} value: `, this.state[stateVal])} )\n\n    }\n      \n    render() {\n        var noteInfo = this.props.note\n        var ts = Math.round((noteInfo.startTime + Number.EPSILON) * 100) / 100\n       \n        return(\n                // <div className='ListItem' >\n                    <pre ref={this.props._ref} className={'ListItem '+ this.props.additionalClasses} >\n                        <div onClick={() => this.props.setCurrVidTime(ts) } className=\"noteTitleContainer\" >\n                            <div className= \"timestamp\" >{ts}</div>\n                            &nbsp;|&nbsp;\n                            <div className= \"noteTitle\" >\n                                {noteInfo.noteTitle != null ? noteInfo.noteTitle : noteInfo.text} \n                            </div> \n                            <br/>\n                        </div>\n                        {/* <textarea disabled={this.state.textarea_disabled} onChange={( e, state ) => this.handleInputChange( e, 'textareaValue')} value={this.state.textareaValue} className=\"noteContent\"></textarea> */}\n                        <span hidden={!this.state.textarea_disabled} >{noteInfo.text}</span> \n                        <textarea hidden={this.state.textarea_disabled} onChange={( e, state ) => this.handleInputChange( e, 'textareaValue')} value={this.state.textareaValue} className=\"noteContent\"></textarea>\n                        \n\n                        {/* {noteInfo.text}<br/>{ts} */}\n                        <button onClick={( e, state ) => this.handleToggleState( e, 'editing')}>Edit</button>\n                        <button onClick={( e, state ) => this.handleToggleState( e, 'textarea_disabled')}>Toggle TextArea</button>\n                        <button hidden={this.state.textarea_disabled} onClick={this.handleSave}>Save</button>\n\n                        \n\n                    </pre>\n                  \n                // </div> setCurrentTime(seconds)\n\n        \n        );\n    }\n}\n","// Scrolling view functionality is inspired and based off of CodePen:\n// Name: 'React: scrollIntoView'\n// Pen Owner: 'Hirokazu Takatama'\n\n\n\n\nimport React from \"react\";\n\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\nimport testVideo  from '../Assets/testVid.mp4'\nimport testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\nimport Note from \"../Components/Note\";\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n\nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 1,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            type: 'web', //  web = youtube, vimero. etc, local = files\n            source: 'YouTube',\n            url: '',\n            fileName: null,\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message111\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message222\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            type: 'local', //  web = youtube, vimero. etc, local = files\n            source: null,\n            url: null,\n            fileName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message3\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    text: \"This is a test message4\",\n                    bookmarked: false,\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\n// var items = [];\n// for (var i = 0; i < 100; i++) {\n//   items.push(i+'d');\n// }\n\nexport default class NoteContainer extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            index: 0\n\n            // notes:\n        }\n        this.handleShow = this.handleShow.bind(this);\n \n    }\n    handleShow(i) {\n        console.log(this.refs, i)\n        console.log(this.refs[toString(i)])\n        // this.setState({index: i});\n        \n        // this.refs[i].scrollIntoView({block: 'end', behavior: 'smooth'});\n        // console.log(this.refs[i].)\n        // this.refs[i].attributes.push(\"centerListItem\")\n        console.log('the refs: ', this.refs, this.refs[1] )\n        this.refs[i].scrollIntoView({block: 'center', behavior: 'smooth'});\n\n        this.setState({index: i})\n      }\n\n      \n    render() {\n      \n        // props = this.props\n\n        // (itemss) = this.props\n        // let { id, itemss } =  this.props;\n        // console.log(\"ITEMMMMS\", itemss)\n        // console.log(\"ITEMMMMS2\", this.props)\n        var notes = this.props.itemList.notes\n        console.log(\"ITEMMMMS\", notes)\n        // var videoLink = this.props.itemList.category == 'web' ? \n        //                         <a className=\"noteSectionVideoTitle\" src={this.props.itemList.url} >{this.props.itemList.url}</a>      : <div className=\"noteSectionVideoTitle\">Uploaded File</div>\n        // var videoLink = this.props.itemList.category == 'web' ? this.props.itemList.url     : <div className=\"noteSectionVideoTitle\">Uploaded File</div>\n        return(\n                <div>\n                    {/* <div className=\"noteSectionVideoTitle\">{this.state.currPlayingVid != {} && (this.state.currPlayingVid.name != null ? this.state.currPlayingVid.name : 'Untitled Video') }</div> */}\n                    <div className=\"noteSectionVideoTitle\">{this.props.itemList.videoName != null ? this.props.itemList.videoName : 'Untitled Video'}</div>\n                    {/* <div className=\"noteSectionVideoTitle\">{this.props.itemList.category == 'web' ? this.props.itemList.url: 'Uploaded File'}</div> */}\n                    {this.props.itemList.category == 'web' ? <div className=\"noteSectionVideoLink\">Watch Now: <a href={this.props.itemList.url}>{this.props.itemList.url}</a></div>  : <div className=\"noteSectionVideoLink\">Uploaded File</div>}\n                    {this.state.index}\n                    {/* this must be a arrow function in order to bind the this so that we can use state in the map function  */}\n                  <ul>{notes.map((item, i) => {\n                    //   if (i == this.state.index){}\n                      if (i == this.state.index){\n                        return (\n                            // <li ref={i} className='centerListItem' >{item.text}</li>\n                            // <Note _ref={i} item={item} additionalClasses='centerListItem' ></Note>\n                            // <pre ref={i} className='ListItem centerListItem' >{item.text}<br/>{item.startTime}</pre>\n                            <div ref={i}>\n                                <Note _ref={i} note={item} additionalClasses='centerListItem' setCurrVidTime = {this.props.setCurrVidTime } changeNote = {this.props.changeNote } videoId = {this.props.itemList.videoId} ></Note>\n                                {/* <pre className='ListItem centerListItem' >{item.text}<br/>{item.startTime}</pre> */}\n                            </div>\n                        )\n                      }\n                      else{\n                        return (\n                            // <li ref={i}>{item.text}</li>\n                            // <Note _ref={i} item={item} ></Note>\n                            // <pre ref={i} className='ListItem' >{item.text}<br/>{item.startTime}</pre>\n                            <div ref={i}>\n                                <Note _ref={i} note={item} additionalClasses='' setCurrVidTime = {this.props.setCurrVidTime }  changeNote = {this.props.changeNote } videoId = {this.props.itemList.videoId} ></Note>\n                                {/* <pre className='ListItem' >{item.text}<br/>{item.startTime}</pre> */}\n                            </div>\n\n\n                          )\n                      }\n                      \n                    })}\n                  </ul>\n                  <button onClick={this.handleShow.bind(this, 0)}>0</button>\n                  <button onClick={this.handleShow.bind(this, 2)}>2</button>\n                  <button onClick={this.handleShow.bind(this, 50)}>50</button>\n                  <button onClick={this.handleShow.bind(this, 99)}>99</button>\n                  {this.state.index}\n                </div>\n        \n        );\n    }\n}\n","import React from \"react\";\n// import styled from 'styled-components';\n// import { theme } from \"../util/GlobalStyles\";\n// import './App.css';\n\n// import '../Styles/expandingCard.css'\n// import '../Styles/social-media-slider-toggles.css'\n// import '../Styles/navbar.css'\nimport '../Styles/page-container-styles.css'\n\nimport test from '../DownloadFolder/testFile.txt'\nimport testVideo  from '../Assets/testVid.mp4'\nimport testVideo1  from './testVid.mp4'\nimport testVideo2  from './testVid.mp4'\n// import testF from '../DownloadFolder/testFolder.zip'\n\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\n\n// import videojs from 'video.js'\nimport VideoPlayer from \"../Components/VideoPlayer.js\";\n\nimport YoutubeVid from 'videojs-youtube';\nimport NoteContainer from \"./NoteContainer\";\nimport Playlist from \"../Components/Playlist\";\n// import 'videojs-youtube';\n\n// import \"https://vjs.zencdn.net/7.8.4/video.js\";\n\n\n// this is how to make a file download \nconst testFile = test;\n// const testFile2 = testF;\n// let zip = new JSZip();\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.generateAsync({type: \"blob\"}).then(function(content) {\n//   FileSaver.saveAs(content, \"download.zip\");\n// }); \n// this command will download a file right away\n\n//react state values:\nconst currentNoteIndex =0;  // this is the index of the note that is currently the note that the video is on to color as the \"current one\"\n                            // to start out, and be easy, we reset this to 0 and start the video from the start every time we change video in the playlist\nconst videoTime =0; //this value should update every half second and is the time that the user saves as the note time but rounded to the next second\n                    //on each update, we check if the time is greater than the timestamp on the above indexed note\n                    //if it's more and the index is not the max length of the note list minus 1, then we check the nextones through the list and stop at the next one before the one that is more than this number. If we get to the end, then the last one is the current note.\n                    //if the note happens to have an end time  (and we cannot set this time to overlap with the next one's start time) then we make sure that the current time is less than that end time\n\n\n                    \nconst Meta = {\n    // fileNames: [],  //this will be an array in the order of the playlist\n    //                 // every Youtube video will have the \n    maxVideoId: 3,\n    maxNoteId:  3,\n    noteData:[\n        {\n            videoId: 0,\n            category: 'web', //  web = youtube, vimero. etc, local = files\n            type: 'video/youtube',\n            url: 'https://www.youtube.com/watch?v=3WQHDUYk310&feature=emb_rel_pause',\n            // videoName: null,\n            videoName: 'Dummy YouTube VideoName 1',\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message111\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message222\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 1,\n            category: 'web', //  web = youtube, vimero. etc, local = files\n            type: 'video/youtube',\n            url: 'https://www.youtube.com/watch?v=voFRslp8d60&t=17s',\n            videoName: null,\n            // videoName: 'Dummy YouTube VideoName 2',\n            notes: \n            [   \n                {\n                    noteId: 0,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message333\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 1,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message444\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n            \n    \n        },\n        {\n            videoId: 2,\n            category: 'local', //  web = youtube, vimero. etc, local = files\n            type: 'video/mp4',\n            url: testVideo2,\n            videoName: \"testVid.mp4\",\n            notes: \n            [   \n                {\n                    noteId: 2,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message444\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                },\n                {   \n                    noteId: 3,\n                    startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime: null,\n                    noteTitle: null,\n                    text: \"This is a test message555\",\n                    bookmarked: false,\n                    created : Date.now(),\n                    lastUpdated : Date.now(),\n                    drawn: false,\n                    images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n            ]\n    \n        }\n\n    ]\n    \n}\n\nlet zip = new JSZip();\nvar Img = zip.folder(\"Images\");\nvar Videos = zip.folder(\"Videos\");\nvar Originals = Videos.folder(\"Originals\");\nvar Drawn = Videos.folder(\"Drawn\");\nvar Data= zip.folder(\"Data\");\nvar MetaFiles= zip.folder(\"Meta\");\n\nMetaFiles.file(\"meta.txt\", JSON.stringify(Meta)  );\n// var Meta = zip.folder(\"meta\");\n\n\n\n// var img = zip.folder(\"images\");\n// zip.file(\"idlist.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// zip.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n// img.file(\"idlist2.txt\", `PMID:29651880\\r\\nPMID:29303721`);\n\nconst downloadNotes = () =>{\n    zip.generateAsync({type: \"blob\"}).then(function(content) {\n        const filename = 'VidNotes '+Date.now()+'.zip'\n        FileSaver.saveAs(content, filename);\n    }); \n}\n\nvar items = [];\nfor (var i = 0; i < 100; i++) {\n  items.push(i+'d');\n}\n\n\nexport default class PageContainer extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            videoRef : null,\n            videoInfo: {},\n            newNote: '',\n            newVideoLink: '',\n            meta: Meta,\n            info: 'asdf',\n            uploadedVideos: [],\n            currPlayingVid : {},\n            currPlayingVidId : 0\n            // current\n        }\n        this.setVideoRef = this.setVideoRef.bind(this);\n        this.getVideoRef = this.getVideoRef.bind(this);\n        this.getCurrVidTime = this.getCurrVidTime.bind(this);\n        this.setCurrVidTime = this.setCurrVidTime.bind(this);\n\n        this.addNote = this.addNote.bind(this);\n        this.changeNote = this.changeNote.bind(this);\n        this.uploadFile = this.uploadFile.bind(this);\n        this.addToPlaylist = this.addToPlaylist.bind(this);\n        // this.handleNoteInputChange = this.handleNoteInputChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        // this.resetNoteState = this.resetNoteState.bind(this);\n\n    }\n    // shouldComponentUpdate(){\n    //     return false\n    // }\n    // resetNoteState(reset = false){\n    //     return reset\n    // }\n    setVideoRef(ref){\n        console.log(\"setting the ref\")\n        // ref.on('playlistchange', function() {\n        //     // ref.playlist();\n        //     console.log(\"The playlist has changed!\")\n          \n        // });\n        ref.on('playlistitem', ()=> {\n            // ref.playlist();\n            console.log(\"Playing next video!\", ref.playlist()[ref.playlist.currentIndex()])\n            var currIndex = ref.playlist.currentIndex()\n            this.setState({\n                // currPlayingVid : ref.playlist()[ref.playlist.currentIndex()],\n                currPlayingVid : ref.playlist()[currIndex],\n                currPlayingVidId : currIndex\n            },\n            ()=> {console.log(\"hiiii\", this.state.currPlayingVid)}\n            )\n          \n        });\n        // playlistitem\n        this.setState({\n            videoRef : ref\n        }\n        // , \n        // ()=>{\n        //     ref.on('playlistchange', function() {\n        //         // ref.playlist();\n        //         console.log(\"The playlist has changed!\")\n              \n        //     });\n        // }\n        )\n    }\n    getVideoRef(){\n        console.log(this.state.videoRef)\n        return this.state.videoRef\n    }\n    getCurrVidTime(data){\n        // console.log(data)\n        var currentTime = this.state.videoRef.currentTime()\n        console.log(\"bhaisdbfalifba\" , currentTime)\n        console.log(\"Current Video Info\" , this.state.currPlayingVid)\n        return currentTime\n        // console.log(\"bhaisdbfalifba\" )\n    }\n    setCurrVidTime(secs){\n        console.log(secs )\n        // this.setState\n        if (this.state.videoRef != null){\n            this.state.videoRef.currentTime(secs)\n        }\n        \n        // console.log(\"bhaisdbfalifba\" , currentTime)\n        // return currentTime\n        // console.log(\"bhaisdbfalifba\" )\n    }\n\n    addNote(e){\n        console.log(this.state.newNote)\n    //     maxVideoId: 1,\n    // maxNoteId:  3,\n        // this.state\n        var metaCopy = this.state.meta;\n        var currentTime  = this.getCurrVidTime()\n        // metaCopy.noteData[0].notes.push(\n        metaCopy.noteData[this.state.currPlayingVidId].notes.push(\n            {   \n                noteId: metaCopy.maxNoteId+1,\n                startTime: currentTime, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                endTime: null,\n                noteTitle: null,\n                text: this.state.newNote,\n                bookmarked: false,\n                created : Date.now(),\n                lastUpdated : Date.now(),\n                drawn: false,\n                images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n            }\n        )\n        metaCopy.maxNoteId = metaCopy.maxNoteId+1;\n\n\n\n        this.setState({\n            meta: metaCopy,\n            newNote: '',\n            info: this.state.newNote\n        }, ()=>{console.log(this.state.meta)} )\n\n        // this.state.meta.noteData[0].notes.push(\n        //     {   \n        //         noteId: Meta.maxNoteId+1,\n        //         startTime: Date(), //this should not be a Date value but instead a count of miliseconds from the start of the video\n        //         endTime: null,\n        //         text: this.state.newNote,\n        //         bookmarked: false,\n        //         drawn: false,\n        //         images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n        //     }\n        // )\n        // Meta.maxNoteId = Meta.maxNoteId+1;\n\n        // console.log(e.target)\n    }\n    changeNote(noteInfo, newText , videoId ){\n        console.log(noteInfo, newText, videoId )\n\n\n                var metaCopy = this.state.meta;\n                // metaCopy.noteData[0].notes.push(\n                metaCopy.noteData[videoId].notes[noteInfo.noteId] = {   \n                    noteId:         noteInfo.noteId,\n                    startTime:      noteInfo.startTime, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                    endTime:        noteInfo.endTime,\n                    noteTitle:      noteInfo.noteTitle,\n                    text:           newText,\n                    bookmarked:     noteInfo.bookmarked,\n                    created:        noteInfo.created,\n                    lastUpdated:    Date.now(),\n                    drawn:          noteInfo.drawn,\n                    images:         noteInfo.images //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                }\n\n\n\n                this.setState({\n                    meta: metaCopy,\n                }, ()=>{console.log(this.state.meta)} )\n\n\n        \n    }\n\n\n// {\n//             videoId: 0,\n//             category: 'web', //  web = youtube, vimero. etc, local = files\n//             type: 'video/youtube',\n//             url: 'https://www.youtube.com/watch?v=3WQHDUYk310&feature=emb_rel_pause',\n//             fileName: null,\n//             notes: \n//             [   \n//                 {\n//                     noteId: 0,\n//                     startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n//                     endTime: null,\n//                     text: \"This is a test message111\",\n//                     bookmarked: false,\n//                     drawn: false,\n//                     images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n//                 },\n//                 {   \n//                     noteId: 1,\n//                     startTime: 0, //this should not be a Date value but instead a count of miliseconds from the start of the video\n//                     endTime: null,\n//                     text: \"This is a test message222\",\n//                     bookmarked: false,\n//                     drawn: false,\n//                     images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n//                 }\n//             ]\n            \n    \n//         },\n\n    addToPlaylist(e, category, fileTarget ){\n\n\n        // let fileName = e.target.value.split('\\\\').pop();\n\n        //   console.log('fileName :', fileName, e.target.value)\n        //   var ext = fileName.substr(fileName.lastIndexOf('.') + 1);\n        \n        //   console.log('fileName :', fileName, e.target.value, ext)\n\n        console.log(\"ADD TO PLAYLIST: \" ,category ,this.state.newVideoLink)\n\n        var type = ''\n        var src = ''\n        var vidName = ''\n        if (category == 'web'){\n            type = 'video/youtube'\n            src = this.state.newVideoLink\n            vidName = src\n\n        }\n        else if (category == 'local'){\n            let fileName = e.target.value.split('\\\\').pop();\n            var ext = e.target.value.substr(e.target.value.lastIndexOf('.') + 1);\n            type = 'video/'+ext\n            // src = this.state.newVideoLink\n\n            src = URL.createObjectURL(e.target.files[0])\n            console.log(\"LOCAL vars: \", type,src)\n            vidName = fileName\n\n            // src = e.target.files[0]\n        }\n    \n        // else if (category == 'local'){\n        //     // let fileName = fileTarget.value.split('\\\\').pop();\n        //     var ext = fileTarget.value.substr(fileTarget.value.lastIndexOf('.') + 1);\n        //     type = 'video/'+ext\n        //     src = this.state.newVideoLink\n\n        //     // src = URL.createObjectURL(fileTarget.files[0])\n        //     console.log(\"LOCAL vars: \", type,src)\n\n        //     // src = e.target.files[0]\n        // }\n        console.log(this.state.newNote)\n        //     maxVideoId: 1,\n        // maxNoteId:  3,\n            // this.state\n            var metaCopy = this.state.meta;\n            var currentTime  = this.getCurrVidTime()\n            metaCopy.noteData.push(\n                {\n                    videoId: parseInt(metaCopy.maxVideoId)+1,\n                    category: category, //  web = youtube, vimero. etc, local = files\n                    type: type,\n                    url: src,\n                    videoName: vidName,\n                    notes: []\n                }\n\n                // {\n                //     videoId: parseInt(metaCopy.videoId)+1,\n                //     category: 'web', //  web = youtube, vimero. etc, local = files\n                //     type: 'video/youtube',\n                //     url: this.state.newVideoLink,\n                //     fileName: null,\n                //     notes: []\n                // }\n\n                // {   \n                //     noteId: Meta.maxNoteId+1,\n                //     startTime: currentTime, //this should not be a Date value but instead a count of miliseconds from the start of the video\n                //     endTime: null,\n                //     text: this.state.newNote,\n                //     bookmarked: false,\n                //     drawn: false,\n                //     images: [] //this is an array of image refrences to include in this note, including if the video screen is drawn on// might separate later\n                // }\n            )\n            console.log(\"meta before1: \", this.state.meta , metaCopy.maxVideoId)\n\n            metaCopy.maxVideoId = parseInt(metaCopy.maxVideoId)+1;\n            console.log(\"meta before2: \", this.state.meta , metaCopy.maxVideoId)\n\n    \n    \n            this.setState({\n                meta: metaCopy,\n                newVideoLink : ''\n            }, ()=>{console.log( \"meta after: \",  this.state.meta)} )\n\n            \n\n        console.log(\"video added: \", this.state.newVideoLink )\n        // this.setState({\n        //     newVideoLink : ''\n        // } )\n        \n\n        //figure out if it's a youtube video or proper url\n        //if it is a proper url, add it to the Meta playlist\n        //make sure that all the video source info is included by using the youtube api to get the info\n        //make sure that trickles down to the individual playlist that we see (make sure it's inhertiing from state)\n\n    }\n    // handleNoteInputChange(e){\n    //     this.setState({newNote: e.target.value})\n    // }\n\n    // handlePlaylistInputChange(){\n\n    // }\n    \n    uploadFile(e){\n        console.log(\"heeeeeelllllooo\")\n        console.log(\"UPLOADING:\", e.target.value, typeof e.target.value)\n        if (e.target.value !== \"\"){ //if a file is uploaded and user did not cancel\n          // Extract file name from path\n          let fileName = e.target.value.split('\\\\').pop();\n\n          console.log('fileName :', fileName, e.target.value)\n          var ext = fileName.substr(fileName.lastIndexOf('.') + 1);\n        \n          console.log('fileName :', fileName, e.target.value, ext)\n\n          let rowNum = e.target.id.split('-').pop();\n          \n          // Get row num from end of id to select this row's label to for filename\n        //   let labelTxt = document.querySelector(`[for=\"uploader-${rowNum}\"] > .filePreview`);\n        //   labelTxt.innerHTML = fileName;\n          // Get track data for processing\n          let arrayBuffer = e.target.files[0].arrayBuffer();\n\n        this.addToPlaylist(e , 'local' , e.target )\n        //   var currentVideos = this.state.uploadedVideos\n        //   currentVideos.push(e.target.files[0])\n        //   this.setState({ uploadedVideos: currentVideos }, this.addToPlaylist(e , 'local' , e.target ))\n\n          \n        //   console.log(e.target.files)\n\n        //   URL.createObjectURL(uploadedFiles[0])\n          \n        //   let ctx = this.$store.state.mixer.master.ctx;\n        //   let vue = this;\n          \n          // decode array buffer\n        //   arrayBuffer.then(function(buffer) {\n        //     ctx.decodeAudioData(buffer, function(decodedData) {\n        //       // add sound to store\n        //       vue.$store.dispatch('addSound', {\n        //         index: rowNum,\n        //         sound: decodedData,\n        //         fileName: fileName\n        //       });\n        //     });\n        //   });\n        }\n    }\n\n    handleInputChange(e, stateVal){\n        // var eVal = e.target.value\n        // in order to see the most current change in printing, you must include the print statment in the setState function and there must be in an anonymnous arrow function    >>> https://forum.freecodecamp.org/t/solved-this-setstate-is-updating-state-after-console-log/206985/2\n        //if we use []around the property name, we can use ES6 computed property names >>> https://stackoverflow.com/questions/29280445/reactjs-setstate-with-a-dynamic-key-name\n        this.setState({[stateVal]: e.target.value},  ()=>{console.log(`new ${stateVal} value: `, this.state[stateVal])} )\n\n    }\n    // generateUrlForPrint\n      \n    render() {\n        const videoJsOptions = {\n            autoplay: true,\n            controls: true,\n            //\n       \n                // techOrder: ['youtube'],\n                // sources: [\n                //   {\n                //     type: 'video/youtube',\n                //     src: 'https://www.youtube.com/watch?v=TeccAtqd5K8' //note that there will be a benign Youtube server side error saying that the host don't match but there is supposedly nothing to worry about this according to stack overflow: https://stackoverflow.com/questions/47833687/youtube-api-failed-to-execute-postmessage-on-domwindow\n                //     // src: 'https://www.youtube.com/embed/HIbAz29L-FA?modestbranding=1&playsinline=0&showinfo=0&enablejsapi=1&origin=http://localhost:3000&widgetid=1',\n                //     // enablejsapi:1,\n                //     // origin:'https://www.youtube.com'\n                //   }\n                // ]\n          }\n          \n        var playlistJSON = [];\n        this.state.meta.noteData.forEach((videoJSON) => {\n                // if (videoJSON.category === 'web'){\n                    console.log(\"web index: \", i)\n                    playlistJSON.push({\n                        name: videoJSON.videoName,\n                        sources: [{\n                            src: videoJSON.url,\n                            type: videoJSON.type\n                        }],\n                        poster: 'http://media.w3.org/2010/05/sintel/poster.png',\n                        thumbnail: [\n                            {\n                              srcset: 'https://helpx.adobe.com/content/dam/help/en/stock/how-to/visual-reverse-image-search-v2_297x176.jpg',\n                              type: 'image/jpeg',\n                              media: '(min-width: 400px;)'\n                            //   media: 'max-width: 40px;'\n                            },\n                            {\n                              src: 'https://helpx.adobe.com/content/dam/help/en/stock/how-to/visual-reverse-image-search-v2_297x176.jpg'\n                            }\n                          ]\n                        //   thumbnail: [\n                        //     {\n                        //       srcset: 'test/example/oceans.jpg',\n                        //       type: 'image/jpeg',\n                        //       media: '(min-width: 400px;)'\n                        //     },\n                        //     {\n                        //       src: 'test/example/oceans-low.jpg'\n                        //     }\n                        //   ]\n                          \n                          \n                    \n                    })\n                // }\n                // else if (videoJSON.category === 'local')\n            }\n        )\n       \n\n        // playlistJSON  = this.state.meta.noteData.reduce((videoJSON, i) => {\n        //     if (videoJSON.category === 'web'){\n        //         console.log(\"web index: \", i)\n        //         return({\n  \n        //             sources: [{\n        //                 src: videoJSON.url,\n        //                 type: videoJSON.type\n        //             }],\n        //             poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n                \n                \n        //         })\n        //     }\n           \n              \n        // })\n\n        console.log(\"playlistJSON:\", playlistJSON)\n        // this.state.meta.noteData.forEach( videoJSON , i){\n        //     if (videoJSON.category === 'web'){\n        //         playlistJSON.push({\n  \n        //             sources: [{\n        //                 src: videoJSON.url,\n        //                 type: videoJSON.type\n        //             }],\n        //             poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n                \n                \n        //         })\n        //     }\n           \n        // };\n        //   const playlistJSON = [{\n        //     // sources: [{\n        //     //   src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n        //     //   type: 'video/mp4'\n        //     // }],\n        //     sources: [{\n        //         src: 'https://www.youtube.com/watch?v=3WQHDUYk310&feature=emb_rel_pause',\n        //         type: 'video/youtube'\n        //     }],\n        //     poster: 'http://media.w3.org/2010/05/sintel/poster.png' //this is the image that shows while it loads I think\n        //   }, \n        //   {\n            \n        //     sources: [{\n        //         src: 'https://www.youtube.com/watch?v=voFRslp8d60&t=17s',\n        //         type: 'video/youtube'\n        //     }],\n        //     poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n        //   }]\n        \n          \n       \n        return(\n            <div className=\"tripleColumnContainer\" >\n                <div className='videoPlayer' >\n                    {/* <video\n                        id=\"my-video\"\n                        className=\"video-js\"\n                        controls\n                        preload=\"auto\"\n                        width=\"640\"\n                        height=\"264\"\n                        poster=\"MY_VIDEO_POSTER.jpg\"\n                    >\n                        <source src={testVideo} type=\"video/mp4\" />\n\n                    </video> */}\n                     {/* <div data-vjs-player>\n                        <video id=\"example_video_1\" \n                            className=\"video-js \" \n                            controls\n                            preload=\"auto\" \n                            width=\"640\"\n                            height=\"264\"\n                            poster=\"http://ec2-54-227-116-247.compute-1.amazonaws.com/models/site-templates/images/cover_img/ted_cover.jpg\" \n                            data-setup='{ \"techOrder\": [\"youtube\"], \"sources\": [{ \"type\": \"video/youtube\", \"src\": \"https://www.youtube.com/watch?v=xjS6SftYQaQ\"}] }'\n                        >\n                        </video>\n                    </div> */}\n                    {/* <VideoPlayer { ...videoJsOptions } setVidRef = {this.setVideoRef}  test = \"hi\" /> */}\n                    <VideoPlayer { ...videoJsOptions } setVidRef = {this.setVideoRef}  test = \"hi\" />\n                    <button onClick={this.getVideoRef}>getVideoRef</button>\n                    <button onClick={this.getCurrVidTime}>Get current Video Time [PC] </button>\n                    <button onClick={ () => this.setCurrVidTime(180)}>Set current Video Time to 3 min[PC] </button>\n                   \n                        jhvj\n                    {/* </div> */}\n                    {/* <video src={testVideo} autoPlay=\"true\" /> */}\n\n\n                    {/* <video id=\"example_video_1\" \n  class=\"video-js vjs-default-skin\" \n  controls\n  preload=\"auto\" \n  width=\"640\"\n  height=\"264\"\n  poster=\"http://ec2-54-227-116-247.compute-1.amazonaws.com/models/site-templates/images/cover_img/ted_cover.jpg\" \n  data-setup='{\"techOrder\":[\"youtube\"], \"src\":\"http://www.youtube.com/watch?v=xYemnKEKx0c\"}'></video> */}\n                    \n                </div>\n                <div className='playList' >\n                    {/* this is how to create an HTML a tag that will download a local app file*/}\n                    <a href={testFile} download=\"testFile.txt\">{testFile}Hiii</a>\n                    <button onClick={downloadNotes}> Click to Download Info </button>\n                    {/* <a href={testFile2} download=\"testFolder.zip\">----Hiii2</a> */}Hi\n                    {/* <textarea onChange={this.handleNoteInputChange} className='NoteInputField' ></textarea> <button onClick={this.addNote} type='submit' >Submit Note</button> */}\n\n                    {/* by including the state variable as a value for the input/textarea field, we make sure it clears out if we set the state variable to be empty because then on the rerender, it repopulates as a empty */}\n                    <textarea onChange={(e, note) => this.handleInputChange(e, 'newNote')} className='NoteInputField' value={this.state.newNote} ></textarea> <button onClick={this.addNote} type='submit' >Submit Note</button>\n                    <input onChange={(e, note) => this.handleInputChange(e, 'newVideoLink')}  className='playlistInputField' value={this.state.newVideoLink}  ></input> <button onClick={(e , type) => this.addToPlaylist(e , 'web')} type='submit' >Add to Playlist</button>\n                \n                    {/* using && conditional logic makes sure that the parent has the ref before we try to render the playlist because the playlist doesn't seem to rerender when the videoRef is updated */}\n                    {/* alternatively, all the starting playlist info can be set up in the video player component but I want to make the playlist div diffinitively in charge of everything relating playlists */}\n                    {this.state.videoRef !== null && this.state.videoRef !== undefined  && <Playlist key={this.state.meta} player={this.state.videoRef} playlist={playlistJSON} test= 'this should APPEAR' />}\n\n                    {/* <input onChange='upload' type='file' accept='.wav, audio/wav'> */}\n                    <input  onChange={(e , type) => this.addToPlaylist(e , 'local')}  type='file' accept='.mp4, video/mp4'></input>\n\n                </div>\n                {/* <div>\n                    {this.state.info} \n                </div> */}\n                    \n                <div className='notes'>\n                    <div>HIII{this.state.currPlayingVid != {} && console.log('current video: ',this.state.currPlayingVid, this.state.currPlayingVid.sources)}</div>\n\n                    {/* Wait until the currPlayingVid has been set to a non-empty name value to show a name and show it as long as it's not null. If it is null, substitute the 'Untitled Video' for null */}\n                    {/* <div className=\"noteSectionVideoTitle\">{this.state.currPlayingVid != {} && (this.state.currPlayingVid.name != null ? this.state.currPlayingVid.name : 'Untitled Video') }</div>\n                    <div className=\"noteSectionVideoTitle\">{this.state.currPlayingVid != {} &&  this.state.currPlayingVid.sources != undefined && (this.state.currPlayingVid.sources[0].type != 'video/mp4' ? this.state.currPlayingVid.sources[0].src : 'Local File') }</div> */}\n                    <NoteContainer id=\"list\" \n                    // itemList={items} \n                    // itemList = {this.state.meta.noteData[0]} \n                    itemList = {this.state.meta.noteData[this.state.currPlayingVidId]} \n                    \n\n                    setCurrVidTime = {this.setCurrVidTime}\n                    changeNote = {this.changeNote}\n                    />\n\n                    Hi\n                    <form>\n                        <input type='button' name='print' value=\"Print Page\" onClick={()=>{window.print()}}/>\n                    </form>\n\n                </div>\n                {/* {this.setCurrVidTime(180)} */}\n               \n            </div>\n        \n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PageContainer from './Containers/PageContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PageContainer/>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}